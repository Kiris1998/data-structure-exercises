1.html标签语义化意义 ？
一个语义元素能够清楚地描述其意义给浏览器和开发者
例如：无语意元素<div>和<span>-无需考虑内容
而语义元素<form>,<table>和<img>-清楚的定义了它的内容

2.html5增加了哪些新功能？
新元素，新属性，2D/3D制图，多媒体播放，本地存储，本地SQL数据，Web应用
<canvas>标签通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。属性：height、width
多媒体元素：<audio>定义音频内容。属性：autoplay（如果出现该属性，则音频在就绪后马上播放。）；controls（如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮））；loop（如果出现该属性，则每当音频结束时重新开始播放。）；muted（如果出现该属性，则音频输出为静音。）；preload（规定当网页加载时，音频是否默认被加载以及如何被加载。）；src（规定音频文件的 URL。）

<video> 标签定义视频，比如电影片段或其他视频流。
属性          值            描述
autoplay	autoplay	如果出现该属性，则视频在就绪后马上播放。
controls	controls	如果出现该属性，则向用户显示控件，比如播放按钮。
height	pixels	设置视频播放器的高度。
loop	loop	如果出现该属性，则当媒介文件完成播放后再次开始播放。
muted	muted	如果出现该属性，视频的音频输出为静音。
poster	URL	规定视频正在下载时显示的图像，直到用户点击播放按钮。
preload	auto/metadata/none	如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 "autoplay"，则忽略该属性。
srcNew	URL	要播放的视频的 URL。
width	pixels	设置视频播放器的宽度。

<source> 标签为媒体元素（比如 <video> 和 <audio>）定义媒体资源。
属性	值	                 描述
media	media_query	规定媒体资源的类型，供浏览器决定是否下载。
src	URL	                规定媒体文件的 URL。
type	MIME_type	规定媒体资源的 MIME 类型。

<embed> 标签定义了一个容器，用来嵌入外部应用或者互动程序（插件）。
属性	值	描述
height	pixels	规定嵌入内容的高度。
src	URL	规定被嵌入内容的 URL。
type	MIME_type	规定嵌入内容的 MIME 类型。
width	pixels	规定嵌入内容的宽度。

<track> 标签为媒体元素（比如 <audio> and <video>）规定外部文本轨道，也就是字幕，字幕格式有 WebVTT 格式（.vtt 格式文件）。
属性	值	描述
default	default	规定该轨道是默认的。如果用户没有选择任何轨道，则使用默认轨道。
kind	captions/chapters/descriptions/metadata/subtitles	规定文本轨道的文本类型。
label	text	规定文本轨道的标签和标题。
src	URL	必需的。规定轨道文件的 URL。
srclang	language_code	规定轨道文本数据的语言。如果 kind 属性值是 "subtitles"，则该属性是必需的。

新表单元素:
标签	                描述
<datalist>	定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。
<keygen>	规定用于表单的密钥对生成器字段。
<output>	                定义不同类型的输出，比如脚本的输出。

新的语义和结构元素:
标签	描述
<article>	定义页面独立的内容区域。
<aside>	定义页面的侧边栏内容。
<bdi>	允许您设置一段文本，使其脱离其父元素的文本方向设置。
<command>	定义命令按钮，比如单选按钮、复选框或按钮
<details>	用于描述文档或文档某个部分的细节
<dialog>	定义对话框，比如提示框
<summary>	标签包含 details 元素的标题
<figure>	规定独立的流内容（图像、图表、照片、代码等等）。
<figcaption>	定义 <figure> 元素的标题
<footer>	定义 section 或 document 的页脚。
<header>	定义了文档的头部区域
<mark>	定义带有记号的文本。
<meter>	定义度量衡。仅用于已知最大和最小值的度量。
<nav>	定义导航链接的部分。
<progress>	定义任何类型的任务的进度。
<ruby>	定义 ruby 注释（中文注音或字符）。
<rt>	定义字符（中文注音或字符）的解释或发音。
<rp>	在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。
<section>	定义文档中的节（section、区段）。
<time>	定义日期或时间。
<wbr>	规定在文本中的何处适合添加换行符。

localStorage 对象:存储的数据没有时间限制。
保存数据：localStorage.setItem(key,value);
读取数据：localStorage.getItem(key);
删除单个数据：localStorage.removeItem(key);
删除所有数据：localStorage.clear();
得到某个索引的key：localStorage.key(index);

sessionStorage 对象:针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。

HTML5 Web SQL 数据库:Web SQL 数据库 API 并不是 HTML5 规范的一部分，但是它是一个独立的规范，引入了一组使用 SQL 操作客户端数据库的 APIs。
openDatabase：这个方法使用现有的数据库或者新建的数据库创建一个数据库对象。
transaction：这个方法让我们能够控制一个事务，以及基于这种情况执行提交或者回滚。
executeSql：这个方法用于执行实际的 SQL 查询。

HTML5 应用程序缓存:使用 HTML5，通过创建 cache manifest 文件，可以轻松地创建 web 应用的离线版本。
离线浏览 - 用户可在应用离线时使用它们
速度 - 已缓存资源加载得更快
减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。

3.meta元素有哪些作用？
meta标签里的数据是供机器解读的，起主要作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现页面转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等。
属性：
content：设置或返回 <meta> 元素的 content 属性的值。
httpEquiv：把 content 属性连接到一个 HTTP 头部。
name：把 content 属性连接到某个名称。
scheme：设置或返回用于解释 content 属性的值的格式。
基本标签：
声明文档使用的字符编码<meta charset='utf-8'> <!-- 声明文档使用的字符编码 -->（有更加标准的lang属性写法）
SEO优化：
页面描述：<meta name="description" content="不超过150个字符" /> <!-- 页面描述 -->
页面关键字：<meta name="keywords" content=""/> <!-- 页面关键词 -->
页面标题：<title>标题</title>
定义网页作者：<meta name="author" content="name, email@gmail.com" /> <!-- 网页作者 -->
定义网页搜索引擎方式<meta name="robots" content="index,follow" /> <!-- 搜索引擎抓取 -->
可选标签包括移动设备ios、安卓、iPad等，Windows8及其它

4.html dom声明作用？
html dom定义了访问和操作HTML文档的标准，它允许程序和脚本动态地访问和更新文档的内容、样式和结构。

5.标准盒模型和怪异盒（ie盒）模型的区别？
标准盒模型的width和height是指内容区域（content）的width和height，标准模式下，一个块的总长度=width+margin（左和右）+padding（左和右）+border（左和右）
怪异盒模型的width和height是指边界区域（border）的width和height，在怪异模式下，一个块的总长度=width+margin（左和右）

6.css选择器的分类？
一、通配符（全局）选择器
样式：*{}
选定文档中所有类型的对象
二、元素（类型）选择器
样式：p{}
选定对应元素
三、id选择器
样式：#（id名）{}
在元素上面增加一个id属性，且值唯一
四、类选择器
样式：.（class名）{}
在元素上增加一个class属性，不能以数字开头，可重复
五、子代选择器
样式：A>B{}
B只能为A的子级，不能跨级选择
六、包含（后代）选择器
样式：A B{}
级别从左到右递减，不必逐级选择

7.浏览器是如何根据选择器规则匹配出元素的？
浏览器对CSS的匹配规则是从右到左，从下到上的
于一个特定的一组选择器，先产生所有元素集合，然后向上匹配，如果不符合上一个部分，如果不匹配就把元素从集合中删除，直到整个选择器都匹配完，还在集合中的元素就是符合这一组选择器的

8.CSS优先级？
！important(不推荐)>内联样式>id选择器>类选择器=属性选择器=伪类选择器>标签选择器=伪元素选择器

9.浮动布局的优缺点？
优点：
1.在图文混排的时候可以很好的使文字环绕在图片周围
2.当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的：第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题
缺点：
最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素，会造成父级元素的高度塌陷
缺点解决办法BFC参考：https://www.cnblogs.com/fitzlovecode/p/heightCollapse.html（写的挺好的）

10.1px问题？
在移动高清方案中，多倍的设计图设计了1px的边框，在手机上缩小呈现时，由于css最低只支持显示1px大小，导致边框太粗的效果。（ios已支持0.5px，安卓还不行）

11.如何实现真实渲染在设备上只有1px像素？
法一：利用box-shadow
优点：
代码量少
可以满足所有场景
缺点：
边框有阴影，颜色变浅

法二：设置 border-image 方案
用1px宽度图片做border图片
优点：
可以设置单条,多条边框
没有性能瓶颈的问题
缺点：
修改颜色麻烦, 需要替换图片
圆角需要特殊处理，并且边缘会模糊

法三：使用background-image实现
background-image 跟border-image的方法一样，你要先准备一张符合你要求的图片。然后将边框模拟在背景上。
优点：
可以设置单条,多条边框
没有性能瓶颈的问题
缺点：
修改颜色麻烦, 需要替换图片
圆角需要特殊处理，并且边缘会模糊

法四：多背景渐变实现
与background-image方案类似，只是将图片替换为css3渐变。设置1px的渐变背景，50%有颜色，50%透明。
优点：
可以实现单条、多条边框
边框的颜色随意设置
缺点：
代码量不少
圆角没法实现
多背景图片有兼容性问题

法五：用小数来写px值
优点：
简单，不需要过多代码。
缺点：
无法兼容安卓设备、 iOS 8 以下设备。

法六：viewport + rem 实现
整体思路：是在viewport设置缩放，通过js去动态修改viewport的值。
优点：
所有场景都能满足
一套代码，可以兼容基本所有布局
缺点：
老项目修改代价过大，只适用于新项目

法七：伪类 + transform 实现
原理是把原先元素的 border 去掉，然后利用 :before 或者 :after 重做 border ，边框宽度设置为1px，并 transform 的 scale 缩小一半，原先的元素相对定位，新做的 border 绝对定位。
优点：
所有场景都能满足
支持圆角(伪类和本体类都需要加border-radius)
缺点：
需要注意<input type=“button”>是没有:before, :after伪元素的
对于已经使用伪类的元素(例如clearfix)，可能需要多层嵌套

详细可参考：https://blog.csdn.net/Boale_H/article/details/107022929

12.class类命名？
class命名一般用全小写，或使用-分隔，例如：grade-table

